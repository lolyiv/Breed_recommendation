# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dv1sR0R-L5UXEgJVQVd04DAEo8vRhtKI
"""

!pip install pyTelegramBotAPI

import telebot
from telebot import types

import random
import requests

bot = telebot.TeleBot('7934195294:AAHBrYr-q-B1uL6qHW1Y90KuVlKVcQpof58')

big_dogs = ['akita','borzoi','boxer','collie','dalmatian']
medium_dogs = ['beagle','bulldog','bullterrier','pitbull','poodle']
small_dogs = ['basenji','chihuahua','corgi','maltese','papillon']

class User_profile:
    def __init__(self, name, lifestyle, age, points, suggested_breeds, chosen_dog):
        self.name = name
        self.lifestyle = lifestyle
        self.age = age
        self.points = points
        self.suggested_breeds = suggested_breeds
        self.chosen_dog = chosen_dog

def counter_points(lifestyle, age):
    try:
        age = int(age)
    except ValueError:
        return [], "Ошибка: возраст должен быть числом"

    points = 0
    suggested_breeds = []
    if age < 14:
        points -= 10
    elif 35 < age <= 60:
        points += 15
    elif age > 60:
        points -= 20
    else:
        points += 50
    if lifestyle == "активный":
        points += 50
    if lifestyle == "пассивный":
        points += 30
    if 90 <= points <= 100:
        suggested_breeds = big_dogs
    elif 50 <= points < 90:
        suggested_breeds = medium_dogs
    else:
        suggested_breeds = small_dogs

    if not suggested_breeds:
        suggested_breeds = small_dogs

    return suggested_breeds, points

users = {}

@bot.message_handler(commands=["start","help"])
def help(message: telebot.types.Message):
    bot.reply_to(message, "Привет! Давайте подберем питомца собаку для вас! Как вас зовут?")
    bot.register_next_step_handler(message, handle_name)

def handle_name(message):
    user_name = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("Активный"))
    markup.add(types.KeyboardButton("Пассивный"))

    bot.reply_to(message, "Отлично! Какой образ жизни вы ведете: активный или пассивный?", reply_markup=markup)
    bot.register_next_step_handler(message, lambda msg: handle_lifestyle(msg, user_name))

def handle_lifestyle(message, user_name):
    if message.text == "активный" or message.text == "пассивный":
        lifestyle = message.text
        bot.reply_to(message, "Отлично! Какой у вас возраст?")
        bot.register_next_step_handler(message, lambda msg: handle_age(msg, user_name, lifestyle))
    else:
        bot.reply_to(message, "Пожалуйста, выберите образ жизни из предложенных вариантов.")
        bot.register_next_step_handler(message, lambda msg: handle_lifestyle(msg, user_name))

def handle_age(message, user_name, lifestyle):
    age = message.text
    suggested_breeds, points = counter_points(lifestyle, age)

    if isinstance(points, str) and points.startswith("Ошибка"):
        bot.reply_to(message, points)
        bot.reply_to(message, "Пожалуйста, введите возраст снова.")
        bot.register_next_step_handler(message, lambda msg: handle_age(msg, user_name, lifestyle))
        return

    user = User_profile(user_name, lifestyle, age, points, suggested_breeds, None)
    users[message.chat.id] = user

    bot.reply_to(message, f"Спасибо за ваши ответы! Вот несколько пород, которые подошли бы вам: {', '.join(user.suggested_breeds)}.")

    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("Посмотреть породу", callback_data="show_breed")
    button2 = types.InlineKeyboardButton("Выбрать другую породу", callback_data="choose_another")
    markup.add(button1, button2)

    bot.reply_to(message, "Что вы хотите сделать?", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    user = users.get(call.message.chat.id)

    if call.data == "show_breed":
        user.chosen_dog = random.choice(user.suggested_breeds)
        bot.send_message(call.message.chat.id, f"Мы выбрали для вас породу: {user.chosen_dog}.")
        bot.send_photo(call.message.chat.id, requests.get(f"https://dog.ceo/api/breed/{user.chosen_dog}/images/random").json().get('message'))
    elif call.data == "choose_another":
        bot.send_message(call.message.chat.id, "Чтобы выбрать другую породу нажмите на кнопку 'Посмотреть породу' снова.")


bot.polling()
